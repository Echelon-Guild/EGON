@page "/"
@using EGON.Blazor.Models
@using EGON.Blazor.Services
@using EGON.Blazor.Shared
@using Microsoft.JSInterop
@inject StorageService StorageService
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized>
        <h3>Upcoming Events</h3>

        @if(_upcomingEvents is null || !_upcomingEvents.Any())
        {
            <p>There are no upcoming events.</p>
        }
        else
        {
            <MudTable Items="_upcomingEvents" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Date and Time</MudTh>
                </HeaderContent>
                <RowTemplate Context="event_">
                    <MudTd>@event_.Name</MudTd>
                    <MudTd>@event_.EventType.ToString()</MudTd>
                    <MudTd Class="event-time" data-utc="@event_.EventDateTime.UtcDateTime.ToString("o")">
                        @event_.EventDateTime
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not authenticated. Redirecting...</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<EchelonEvent> _upcomingEvents;

    protected override async Task OnInitializedAsync()
    {
        // Load your events; this could be asynchronous.
        _upcomingEvents = StorageService.GetUpcomingEvent()?.ToList() ?? new List<EchelonEvent>();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("formatEventTimes");
        }

        await base.OnAfterRenderAsync(firstRender);
    }


}